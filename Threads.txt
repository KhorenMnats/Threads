What is a Thread 
A thread is an independent execution path, able to run simultaneously with other threads.
An execution path is a possible flow of control of a program.

What is a Critical Secton
A Critical Secton is a block of code that accesses a shared resource and
can't be executed by more than one thread at the same time. ...
When a thread wants access to a critical section,
it uses one of these synchronization mechanisms to find out whether
there is any other thread executing the critical section

What is a Synchronization mechanisms (lock, monitor)
Synchronization is a technique that allows only one thread to access the resource for the particular time.
No other thread can interrupt until the assigned thread finishes its task.

What is a Deadlock
A Deadlock is a situation where two or more threads are frozen in their execution
because they are waiting for each other to finish.

What is a Race Condition 
A Race Condition occurs when two or more threads are able to access shared data and they try to change it at the same time.

Interlocked
Provides atomic operations for variables that are shared by multiple threads.

The volatile keyword indicates that a field might be modified by multiple threads that are executing at the same time.
Fields that are declared volatile are not subject to these optimizations.

A mutual exclusion (“Mutex”) is a mechanism that acts as a flag 
to prevent two threads from performing one or more actions simultaneously. 
A Mutex is like a C# lock, but it can work across multiple processes.
Mutex is a synchronization primitive that grants exclusive access to the shared resource to only one thread. 

A Semaphore does the same as a mutex but
The Semaphore is limit the number of threads that can have access to a shared resource concurrently.
In other words, we can say that Semaphore allows one or more threads to enter into the critical section and execute
the task concurrently with thread safety.

https://abhijit-k-adhikari.me/2012/04/16/eventwaithandler-autoresetevent-vs-manualresetevent/
WaitHandler
Threads can communicate using WaitHandlers by signaling.
Mutex, Semapore and EventWaitHandle are derived from WaitHandle class.

EventWaitHandle 
There are two types of EventWaitHandlers. AutoResetEvent and ManualResetEvent.

AutoResetEvent lets one waiting thread at a time when Set() is called 
but ManualResetEvent lets all waiting threads to pass by when Set() is called.
ManualResetEvent starts blocking when Reset() is called.

WahitHandle is encapsulates operating system-specific objects that wait for exclusive access to shared resources.





